#!/usr/bin/env node

try {
	RegExp("\\p{Emoji}", "u");
} catch (e) {
	console.log("We require Node.js version 10 or later; you're using " + process.version);
	process.exit(1);
}

var child_process = require('child_process');
var fs = require('fs');
var path = require('path');

process.chdir(__dirname);

function shell(cmd) {
	child_process.execSync(cmd, {stdio: 'inherit'});
}

function sucrase(src, out, opts) {
	shell(`npx sucrase ${opts || ''} -q ${src} -d ${out} --transforms typescript,imports --enable-legacy-typescript-module-interop`);
}

function replace(file, replacements) {
	fs.lstat(file, function (err, stats) {
		if (err) throw err;
		if (stats.isSymbolicLink()) return;
		if (stats.isFile()) {
			if (!file.endsWith('.js')) return;
			fs.readFile(file, "utf-8", function (err, text) {
					if (err) throw err;
					var anyMatch = false;
					for (var i = 0; i < replacements.length; i++) {
						anyMatch = anyMatch || text.match(replacements[i].regex);
						if (anyMatch) text = text.replace(replacements[i].regex, replacements[i].replace);
					}
					if (!anyMatch) return;
					fs.writeFile(file, text, function (err) {
						if (err) throw err;
					});
				});
		} else if (stats.isDirectory()) {
			fs.readdir(file, function (err, files) {
				if (err) throw err;
				for (var i = 0; i < files.length; i++) {
					replace(path.join(file, files[i]), replacements);
				}
			});
		}
	});
}
function copyOverData(file) {
	var source = './data/' + file;
	var dest = './.data-dist/' + file;
	fs.readFile(source, function (err, text) {
		if (err) throw err;
		fs.writeFile(dest, text, function (err) {
			if (err) throw err;
		});
	});
}

try {
	var sucraseVersion = require('sucrase').getVersion().split('.');
	if (
		parseInt(sucraseVersion[0]) < 3 ||
		(parseInt(sucraseVersion[0]) === 3 && parseInt(sucraseVersion[1]) < 12)
	) {
		throw new Error("Sucrase version too old");
	}
} catch (e) {
	console.log('Installing dependencies...');
	shell('npm install --production');
}

sucrase('./data', './.data-dist');
sucrase('./sim', './.sim-dist');
sucrase('./lib', './.lib-dist');
sucrase('./server', './.server-dist');
sucrase('./tools/set-import', './tools/set-import', '--exclude-dirs=sets');

if (!fs.existsSync('./.data-dist/README.md')) {
	const text = '**NOTE**: This folder contains the compiled output of the `data/` directory.\n' +
		'You should be editing the `.ts` files there and then running `npm run build` or\n' +
		'`./pokemon-showdown` to force these `.js` files to be recreated.\n';
	fs.writeFile('./.data-dist/README.md', text, function () {});
	fs.writeFile('./.sim-dist/README.md', text.replace('data/', 'sim/'), function () {});
	fs.writeFile('./.server-dist/README.md', text.replace('data/', 'server/'), function () {});
	fs.writeFile('./.lib-dist/README.md', text.replace('data/', 'lib/'), function () {});
}

// sucrase doesn't copy JSON over, so we'll have to do it ourselves
copyOverData('mods/gen7/factory-sets.json');
copyOverData('mods/gen7/bss-factory-sets.json');
copyOverData('mods/gen6/factory-sets.json');

// NOTE: replace is asynchronous - add additional replacements for the same path in one call instead of making multiple calls.
replace('.data-dist', [
	{regex: /(require\(.*?)(lib|sim)/g, replace: `$1.$2-dist`},
]);
replace('.sim-dist', [
	{regex: /(require\(.*?)(lib)/g, replace: `$1.lib-dist`},
]);
replace('.server-dist', [
	{regex: /(require\(.*?)(lib|sim)/g, replace: `$1.$2-dist`},
]);
replace('./tools/set-import/importer.js', [
	{regex: /(require\(.*?)(lib|sim)/g, replace: `$1.$2-dist`},
]);

// Make sure config.js exists. If not, copy it over synchronously from
// config-example.js, since it's needed before we can start the server
try {
	require.resolve('./config/config');
} catch (err) {
	if (err.code !== 'MODULE_NOT_FOUND') throw err; // should never happen

	console.log('config.js does not exist. Creating one with default settings...');
	fs.writeFileSync(
		'config/config.js',
		fs.readFileSync('config/config-example.js')
	);
}
